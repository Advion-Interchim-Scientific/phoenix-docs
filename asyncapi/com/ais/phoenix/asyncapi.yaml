asyncapi: 2.6.0
id: https://github.com/Advion-Interchim-Scientific/phoenix-docs
tags:
  - name: api
  - name: remote
  - name: chromatography
info:
  title: puriFlash® API
  version: 1.0.0
  description: >
    > ### Notice

    > #### This document is currently being drafted and is not complete.


    ## Overview


    Designed with flexibility and ease of use in mind, this API enables remote
    control of a puriFlash® system and all its peripherals. It makes it easy to
    manage the entire purification processes in a laboratory environment.


    ### Features


    * **System Control**: seamless management of connections to puriFlash®
    systems and their various peripherals.


    * **Advanced Queue Management**: Organize and monitor sequential and
    parallel processes   with efficient queuing.


    * **Real-time Monitoring**: Stay informed with system status updates and
    other collection, elution and detection measures.


    * **Anomaly Detection**: Quickly identify and report errors and issues.


    ### Hardware support


    Compatible with all puriFlash® series.


    ### Communication protocol


    * **MQTT (Message Queuing Telemetry Transport)**: lightweight
    publish/subscribe messaging protocol.


    ## Getting started


    ### Phoenix Server Application 


    A cross-platform console application that can be run as a service on any
    computer connected to the puriFlash® system.


    * **Windows**

      * Execute **phoenix-server.exe** as an administrator.

      * Obtain a license key from the support team upon the first launch using the unique key generated by the application.

      * Disable terminal **Quick Edit mode**. 

      * Add the application folder to Windows Defender's exclusion list.
    
    * **MacOS**
    
      * (TODO)

    * **Linux**
    
      * (TODO) 
    
    #### Configuration


    (TODO)


    ### Tools


    * **API Exploration**: Use tools like [Postman](https://www.postman.com) or
    [MQTTX](https://mqttx.app) to explore and interact with the API.


    * **Performance Monitoring**: Connect using JConsole tool to the
    application's JMX server at <u>**{host}:9010**</u>.


    ### Examples


    (TODO: Additional project examples and usage scenarios will be provided on
    GitHub.)
  termsOfService: https://www.flash-chromatographie.com/flash-purification-systemes-puriflash
  contact:
    name: Support
    url: >-
      https://www.flash-chromatographie.com/flash-purification-systemes-puriflash
    email: phoenix@advion-interchim.com
  license:
    name: License
    url: >-
      https://www.flash-chromatographie.com/flash-purification-systemes-puriflash
defaultContentType: application/json
servers:
  TCP:
    url: tcp://{host}:{port}
    protocol: mqtt
    variables:
      host:
        default: 127.0.0.1
      port:
        default: '1883'
  Websocket:
    url: ws://{host}:{port}
    protocol: mqtt
    variables:
      host:
        default: 127.0.0.1
      port:
        default: '8083'
channels:
  puriflash/request/{clientId}:
    description: Channel used for sending requests to the system.
    parameters:
      clientId:
        $ref: '#/components/parameters/clientId'
    publish:
      operationId: publishRequest
      message:
        $ref: '#/components/messages/RequestMessage'
      traits:
        - $ref: '#/components/operationTraits/mqtt'
  puriflash/response/{clientId}:
    description: Channel for receiving responses from the system.
    parameters:
      clientId:
        $ref: '#/components/parameters/clientId'
    subscribe:
      operationId: subscribeToResponse
      message:
        $ref: '#/components/messages/ResponseMessage'
  puriflash/status:
    description: Channel for receiving status updates from the system.
    subscribe:
      operationId: subscribeToStatus
      message:
        $ref: '#/components/messages/StatusMessage'
  puriflash/error:
    description: Channel for receiving error messages from the system.
    subscribe:
      operationId: subscribeToError
      message:
        $ref: '#/components/messages/ErrorMessage'
components:
  messages:
    RequestMessage:
      messageId: requestMessage
      name: Request
      title: Request
      summary: >-
        This message contains the information needed to send a request to the
        system. Depending on the command used, a specific parameter may be
        required.
      contentType: application/json
      payload:
        $ref: '#/components/schemas/RequestPayload'
      examples:
        - name: Connect
          summary: Simple connection request
          payload:
            command: CONNECT
        - name: Set Service Queue Entries
          summary: >-
            Set a single entry - ELSD purge process. (Purge the ELSD for 60sec,
            without detection acquisition
          payload:
            command: SET_SQ_ENTRIES
            parameter:
              - rank: 1
                name: ELSD Purge
                parallelProcessesParameters:
                  - type: ELSD_PURGE
                    param:
                      type: ElsdPurgeParams
                      duration: 60
                    delay: 0
                    sync: false
                cycles: 1
    ResponseMessage:
      messageId: responseMessage
      name: Response
      title: Response
      summary: >-
        Response message from the system. Contains information about the
        execution status of commands and any results or data.
      contentType: application/json
      payload:
        $ref: '#/components/schemas/ResponsePayload'
      examples:
        - name: Error
          summary: Usupported request error example.
          payload:
            timestamp: '2024-01-08T10:00:00.000Z'
            type: ERROR
            code: RMT002
            value: 'RMT002: Unsupported request.'
            requestUuid: d8e69d62-f5a8-43a5-9dd1-de474acb51f5
        - name: Success
          summary: Success response example.
          payload:
            timestamp: '2024-01-08T10:00:00.000Z'
            type: SUCCESS
            code: '0'
            value: None
            requestUuid: d8e69d62-f5a8-43a5-9dd1-de474acb51f5
    StatusMessage:
      messageId: statusMessage
      name: Status
      title: Status
      summary: Status updates from the system.
      contentType: application/json
      payload:
        $ref: '#/components/schemas/StatusPayload'
      examples:
        - name: Initializing
          summary: System initializing UV Detector
          payload:
            state: INITIALIZING
            description: Turning on UV Lamps...
    ErrorMessage:
      messageId: errorMessage
      name: Error
      title: Error
      summary: >-
        Error message indicating issues or failures. Includes error codes and a
        description for troubleshooting.
      contentType: application/json
      payload:
        $ref: '#/components/schemas/ErrorPayload'
      examples:
        - name: Communication failed
          summary: Pump module not responding
          payload:
            type:
              code: PMP002
              description: Serial port communication error
  schemas:
    RequestPayload:
      type: object
      required:
        - command
      properties:
        timestamp:
          type: string
          format: date-time
          description: >-
            Request timestamp. Use UTC format for synchronization across
            different time zones.
        uuid:
          type: string
          format: uuid
          description: Request unique identifier.
        command:
          type: string
          enum:
            - CONNECT
            - DISCONNECT
            - SET_SQ_ENTRIES
            - START_SQ
            - PAUSE_SQ
            - RESUME_SQ
            - STOP_SQ
          description: Command to execute.
        parameter:
          description: >-
            Additional parameter required for certain commands. Follow the
            specific schema for each command.
          type: array
          items:
            $ref: '#/components/schemas/SQEntriesParameters'
    SQEntriesParameters:
      description: List of sequential service queue blocks
      required:
        - rank
        - name
        - parallelProcessesParameters
        - cycles
      type: object
      properties:
        rank:
          type: integer
          minimum: 1
          description: Process rank.
        name:
          type: string
          description: Process custom name.
        parallelProcessesParameters:
          description: List of parallel processes
          $ref: '#/components/schemas/ParallelProcessesParameters'
        cycles:
          type: integer
          minimum: 1
          default: 1
          description: Number of executions.
    ParallelProcessesParameters:
      description: Parallel processes parameters.
      type: array
      items:
        $ref: '#/components/schemas/ProcessParameters'
    ProcessParameters:
      description: Process parameters
      type: object
      required:
        - type
        - param
        - delay
        - sync
      properties:
        type:
          type: string
          enum:
            - ELUTION_PURGE
            - ELSD_PURGE
            - PRE_PURIFICATION
            - PURIFICATION
            - POST_PURIFICATION
        param:
          description: Process parameter according to selected type
          anyOf:
            - $ref: '#/components/schemas/ElutionPurgeParameters'
            - $ref: '#/components/schemas/ElsdPurgeParameters'
        delay:
          description: Process start delay in milliseconds
          type: integer
          default: 0
          minimum: 0
        sync:
          type: boolean
          description: >-
            If 'true', The process will be delayed according to the slowest
            process, so that both processes finish at the same time.
          default: false
    ElutionPurgeParameters:
      description: Elution purge parameters
      type: object
    ElsdPurgeParameters:
      description: ELSD purge parameters
      type: object
      properties:
        type:
          type: string
          const: ElsdPurgeParams
        duration:
          description: Duration of the purge in seconds.
          type: integer
          minimum: 0
    ResponsePayload:
      description: Response message to a specific request.
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          description: Response timestamp.
        type:
          description: Response type.
          type: string
          enum:
            - SUCCESS
            - ERROR
        code:
          description: Error code.
          type: string
        value:
          description: >-
            The response can either be the requested value in case of successful
            processing or detailed error information if the request fails.
          type: string
        requestUuid:
          type: string
          format: uuid
          description: Request unique identifier.
    StatusPayload:
      description: Current system status.
      type: object
      properties:
        state:
          description: System state.
          type: string
          enum:
            - DISCONNECTED
            - CONNECTING
            - INITIALIZING
            - PAUSE_ALARM
            - READY
            - PURGING
            - PURGE_PAUSED
            - SAMPLE_LOADING
            - SAMPLE_LOADING_PAUSED
            - WAITING_SAMPLE
            - EQUILIBRATING
            - REFILLING
            - REFILL_PAUSED
            - STABILIZING
            - STABILIZATION_PAUSED
            - EQUILIBRATION_PAUSED
            - PURIFYING
            - PURIFICATION_PAUSED
            - WAITING_FOR_BYPASS
        description:
          type: string
          description: System status description.
    ErrorPayload:
      description: System detailed error.
      type: object
      properties:
        type:
          $ref: '#/components/schemas/ErrorType'
        fullDescription:
          description: Full error description.
          type: string
        stackTrace:
          description: Error stack trace.
          type: string
    ErrorType:
      type: object
      properties:
        code:
          type: string
        description:
          type: string
    ClientId:
      type: string
  parameters:
    clientId:
      schema:
        $ref: '#/components/schemas/ClientId'
      description: MQTT Client unique identifier.
  operationTraits:
    mqtt:
      bindings:
        mqtt:
          qos: 2